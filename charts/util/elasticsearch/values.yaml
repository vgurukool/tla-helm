global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: "gp2"
  storageClass: ""
  elasticsearch:
    service:
      name: elasticsearch
      ports:
        restAPI: 9200
  kibanaEnabled: false
  compatibility:
    openshift:
      adaptSecurityContext: auto
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []
namespaceOverride: ""
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
clusterName: elastic
containerPorts:
  restAPI: 9200
  transport: 9300
plugins: ""
snapshotRepoPath: ""
config: {}
extraConfig: {}
extraHosts: []
extraVolumes: []
extraVolumeMounts: []
initScripts: {}
initScriptsCM: ""
initScriptsSecret: ""
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
sidecars: []
initContainers: []
useIstioLabels: true
image:
  registry: docker.io
  repository: bitnami/elasticsearch
  tag: 8.15.2-debian-12-r2
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
security:
  enabled: false
  elasticPassword: ""
  existingSecret: ""
  fipsMode: false
  tls:
    restEncryption: true
    autoGenerated: false
    verificationMode: "full"
    master:
      existingSecret: ""
    data:
      existingSecret: ""
    ingest:
      existingSecret: ""
    coordinating:
      existingSecret: ""
    keystoreFilename: elasticsearch.keystore.jks
    truststoreFilename: elasticsearch.truststore.jks
    usePemCerts: false
    passwordsSecret: ""
    keystorePassword: ""
    truststorePassword: ""
    keyPassword: ""
    secretKeystoreKey: ""
    secretTruststoreKey: ""
    secretKey: ""
service:
  type: ClusterIP
  ports:
    restAPI: 9200
    transport: 9300
  nodePorts:
    restAPI: ""
    transport: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}
ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: elasticsearch.local
  path: /
  annotations: {}
  tls: false
  selfSigned: false
  ingressClassName: ""
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []
master:
  masterOnly: true
  replicaCount: 2
  extraRoles: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  nameOverride: ""
  fullnameOverride: ""
  servicenameOverride: ""
  annotations: {}
  updateStrategy:
    type: RollingUpdate
  resourcesPreset: "small"
  resources: {}
  heapSize: 128m
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  topologySpreadConstraints: []
  podManagementPolicy: "Parallel"
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  persistence:
    enabled: false
    storageClass: ""
    existingClaim: ""
    existingVolume: ""
    selector: {}
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain   
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: false
    annotations: {}
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
data:
  replicaCount: 0
  extraRoles: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  nameOverride: ""
  fullnameOverride: ""
  servicenameOverride: ""
  annotations: {}
  updateStrategy:
    type: RollingUpdate
  resourcesPreset: "medium"
  resources: {}
  heapSize: 1024m
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  topologySpreadConstraints: []
  podManagementPolicy: "Parallel"
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  persistence:
    enabled: true
    storageClass: ""
    existingClaim: ""
    existingVolume: ""
    selector: {}
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenScaled: Retain
    whenDeleted: Retain
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: false
    annotations: {}
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
coordinating:
  replicaCount: 0
  extraRoles: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  nameOverride: ""
  fullnameOverride: ""
  servicenameOverride: ""
  annotations: {}
  updateStrategy:
    type: RollingUpdate
  resourcesPreset: "small"
  resources: {}
  heapSize: 128m
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  topologySpreadConstraints: []
  podManagementPolicy: "Parallel"
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: false
    annotations: {}
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
ingest:
  enabled: false
  replicaCount: 0
  extraRoles: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  nameOverride: ""
  fullnameOverride: ""
  servicenameOverride: ""
  annotations: {}
  containerPorts:
    restAPI: 9200
    transport: 9300
  updateStrategy:
    type: RollingUpdate
  resourcesPreset: "small"
  resources: {}
  heapSize: 128m
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  automountServiceAccountToken: false
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  topologySpreadConstraints: []
  podManagementPolicy: "Parallel"
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  command: []
  args: []
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: false
    annotations: {}
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
  service:
    enabled: false
    type: ClusterIP
    ports:
      restAPI: 9200
      transport: 9300
    nodePorts:
      restAPI: ""
      transport: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    extraPorts: []
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: ""
    hostname: elasticsearch-ingest.local
    path: /
    annotations: {}
    tls: false
    selfSigned: false
    ingressClassName: ""
    extraHosts: []
    extraPaths: []
    extraTls: []
    secrets: []
    extraRules: []
metrics:
  enabled: false
  nameOverride: ""
  fullnameOverride: ""
  image:
    registry: docker.io
    repository: bitnami/elasticsearch-exporter
    tag: 1.8.0-debian-12-r1
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "5"
  extraArgs: []
  automountServiceAccountToken: false
  hostAliases: []
  schedulerName: ""
  priorityClassName: ""
  containerPorts:
    http: 9114
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  service:
    type: ClusterIP
    port: 9114
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9114"
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resourcesPreset: "nano"
  resources: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9114"
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: false
    annotations: {}
  serviceMonitor:
    enabled: false
    namespace: ""
    jobLabel: ""
    interval: ""
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
    selector: {}
    labels: {}
    honorLabels: false
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r30
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
sysctlImage:
  enabled: true
  registry: docker.io
  repository: bitnami/os-shell
  tag: 12-debian-12-r30
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
copyTlsCerts:
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r30
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resourcesPreset: "nano"
  resources: {}
kibana:
  elasticsearch:
    hosts:
      - '{{ include "elasticsearch.service.name" . }}'
    port: '{{ include "elasticsearch.service.ports.restAPI" . }}'
